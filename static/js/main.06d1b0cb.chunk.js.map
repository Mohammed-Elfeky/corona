{"version":3,"sources":["components/popup.module.css","components/DropDwon.js","components/drawCircles.js","components/Card.js","components/Mapp.js","components/Country.js","components/Chart.js","App.js","reportWebVitals.js","index.js","components/Card.module.css","components/Mapp.module.css","components/Country.module.css"],"names":["module","exports","DropDwon","dropDownCountries","setDropDownValue","dropDownValue","setSingleCountry","setCenter","setZoom","handleChange","e","a","selectValue","target","value","url","fetch","theCountry","json","theCountryJson","coordinates","countryInfo","lat","long","zoomValue","onChange","map","ele","country","casesTypeColors","cases","hex","multiplier","recovered","deaths","drawCircles","data","casesType","Circle","center","fillOpacity","pathOptions","color","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","className","name","numeral","format","chartCreating","type","dataWillPushedToState","objectKeys","Object","keys","forEach","indexOf","thePreviousElementIndex","thePreviousElement","push","x","y","Card","title","total","today","setCasesType","setData","Classes","recoverd","handleClick","theChartData","theJsonChartData","theFinalData","onClick","card","Mapp","zoom","countriesForCircles","ChangeView","useMap","setView","mapp","height","TileLayer","attribution","Country","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","Chart","useEffect","chartsData","jsonChartsData","chartData","getChartsApiData","length","datasets","App","arr","useState","setDropDownCountries","singleCountry","setCountriesForCircles","countries","jsonCountries","console","log","getCountries","showWorldWideWhenFirstLoad","todayCases","todayRecovered","todayDeaths","sort","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06d1b0cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flag\":\"popup_flag__2h-Nc\"};","import React from 'react'\r\n\r\nfunction DropDwon({dropDownCountries,setDropDownValue,dropDownValue,setSingleCountry,setCenter,setZoom}) {\r\n\r\n    const handleChange= async(e)=>{\r\n        let selectValue=e.target.value\r\n\r\n        setDropDownValue(selectValue)\r\n\r\n        const url= selectValue === 'worlwide' ?\r\n        'https://disease.sh/v3/covid-19/all':\r\n        `https://disease.sh/v3/covid-19/countries/${selectValue}`\r\n\r\n        \r\n        let theCountry= await fetch(url)\r\n        let theCountryJson= await theCountry.json()\r\n\r\n        let coordinates= selectValue === 'worlwide'?\r\n        [34.80746,-40.4098]:\r\n        [theCountryJson.countryInfo.lat,theCountryJson.countryInfo.long]\r\n\r\n        let zoomValue= selectValue === 'worlwide'?\r\n        2:\r\n        6\r\n        \r\n        setCenter(coordinates)\r\n        setZoom(zoomValue)\r\n        setSingleCountry(theCountryJson)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <select value={dropDownValue} onChange={handleChange}>\r\n                <option value=\"worlwide\">worlwide</option>\r\n                {\r\n                    dropDownCountries.map(ele=>{\r\n                        return <option value={ele.country}>{ele.country}</option>\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDwon\r\n","import React from \"react\"\r\nimport {Circle,Popup} from 'react-leaflet'\r\nimport numeral from 'numeral'\r\nimport style from './popup.module.css'\r\nconst casesTypeColors = {\r\n  cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 200,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 300,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const drawCircles=(data,casesType)=>{\r\n    return data.map(country=>(\r\n         <Circle\r\n               center={[country.countryInfo.lat,country.countryInfo.long]}\r\n               fillOpacity={.3}\r\n               pathOptions={{color:casesTypeColors[casesType].hex,fillColor: casesTypeColors[casesType].hex}}\r\n               radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n               >\r\n                 <Popup>\r\n                     \r\n                     <div style={{backgroundImage:`url(${country.countryInfo.flag})`}} className={style.flag}>\r\n                        \r\n                     </div>\r\n                     <div className={style.name}>\r\n                         country :{country.country}\r\n                     </div>\r\n                     <div className={style.cases}>\r\n                         cases:{numeral(country.cases).format('0,0')}\r\n                     </div>\r\n                     <div className={style.recovered}>\r\n                         recovered:{numeral(country.recovered).format('0,0')}\r\n                     </div>\r\n                     <div className={style.deaths}>\r\n                         deaths:{numeral(country.deaths).format('0,0')}\r\n                     </div>\r\n                    \r\n                 </Popup>\r\n               </Circle>\r\n    ))\r\n} \r\n\r\nexport const chartCreating=(data,type='cases')=>{\r\n  const dataWillPushedToState=[]\r\n  const objectKeys=Object.keys(data[type])\r\n  objectKeys.forEach(ele=>{\r\n      if(objectKeys.indexOf(ele) !== 0){\r\n          let thePreviousElementIndex=(objectKeys.indexOf(ele))-1\r\n          let thePreviousElement=objectKeys[thePreviousElementIndex]\r\n          dataWillPushedToState.push(\r\n              {\r\n                  x:ele,\r\n                  y:data[type][ele]-data[type][thePreviousElement]\r\n              }\r\n          )\r\n      }\r\n      \r\n  })\r\n\r\n  return dataWillPushedToState\r\n}\r\n\r\nexport const  sortCountries=(arr)=> {\r\n  return arr.sort(function (a, b) {return b.cases - a.cases})\r\n}","import React, { useState } from 'react'\r\nimport style from './Card.module.css'\r\nimport numeral from 'numeral'\r\nimport {chartCreating} from './drawCircles'\r\nfunction Card({title,total,today,setCasesType,setData,casesType}) {\r\n\r\n    const Classes={\r\n        cases:style.cases,\r\n        deaths:style.deaths,\r\n        recovered:style.recoverd\r\n    }\r\n\r\n    const handleClick=async()=>{\r\n        setCasesType(title)\r\n        let theChartData=await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n        let theJsonChartData=await theChartData.json()\r\n        let theFinalData=chartCreating(theJsonChartData,title)\r\n        setData(theFinalData)\r\n    }\r\n    return (\r\n        <div onClick={handleClick} className={`${style.card} ${casesType === title && Classes[title]}`} >\r\n            <p>{title}</p>\r\n            {\r\n                today >= 1000 ?\r\n                <h2>{numeral(today).format('0 a')}</h2>:\r\n                today >= 1000000 ?\r\n                <h2>{numeral(today).format('0.0a')}</h2>:\r\n                <h2>{today}</h2>\r\n            }\r\n            {\r\n                total >= 1000 ?\r\n                <p>{numeral(total).format('0 a')}</p>:\r\n                total >= 1000000 ?\r\n                <p>{numeral(total).format('0.0a')}</p>:\r\n                <p>{total}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React, { useRef } from 'react'\r\nimport style from './Mapp.module.css'\r\nimport { MapContainer as LeafletMap , TileLayer ,useMap} from \"react-leaflet\"\r\nimport {drawCircles} from './drawCircles'\r\nfunction Mapp({center,zoom,countriesForCircles,casesType}) {\r\n\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n      }\r\n\r\n    return (\r\n        <div className={style.mapp}>\r\n            <LeafletMap center={center} zoom={zoom} style={{height:\"100%\"}} >\r\n            <ChangeView center={center} zoom={zoom} /> \r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {drawCircles(countriesForCircles,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mapp\r\n","import React from 'react'\r\nimport style from './Country.module.css'\r\nimport numeral from 'numeral'\r\nfunction Country({country,cases}) {\r\n    return (\r\n        <div className={style.country}>\r\n            <h5>{country}</h5>\r\n            <h5>{numeral(cases).format('0,0')}</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React,{useState,useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nimport {chartCreating} from './drawCircles'\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\nfunction Chart({data,setData}) {\r\n    \r\n    useEffect(()=>{\r\n        const getChartsApiData= async()=>{\r\n            const chartsData=await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n            const jsonChartsData=await chartsData.json()\r\n            const chartData=chartCreating(jsonChartsData)\r\n            setData(chartData)\r\n        }\r\n        getChartsApiData()\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data && data.length >0 && \r\n                <Line\r\n                options={options}\r\n                data={{\r\n                    datasets:[\r\n                        {\r\n                            data:data\r\n                        }\r\n                    ]\r\n                }}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React ,{useState,useEffect} from 'react'\nimport './App.css';\nimport DropDown from './components/DropDwon'\nimport Card from './components/Card'\nimport 'leaflet/dist/leaflet.css'\nimport Mapp from './components/Mapp'\nimport Country from './components/Country'\nimport Chart from './components/Chart'\nimport {sortCountries} from './components/drawCircles'\n\n\nfunction App() {\n  const [dropDownCountries,setDropDownCountries]=useState([]) //app\n  const [dropDownValue,setDropDownValue]=useState('worlwide') //dropdown\n  const [singleCountry,setSingleCountry]=useState([])\n  const [zoom,setZoom]=useState(2)\n  const [center,setCenter]=useState([34.80746,-40.4098])\n  const [countriesForCircles,setCountriesForCircles]=useState([])\n  const [casesType,setCasesType]=useState('cases')\n  const [data,setData]=useState({})\n  useEffect(()=>{\n    const getCountries= async()=>{\n      let countries=await fetch('https://disease.sh/v3/covid-19/countries')\n      let jsonCountries=await countries.json()\n      console.log(jsonCountries)\n      setCountriesForCircles(jsonCountries)\n      jsonCountries= jsonCountries.map(({country,cases})=>{\n        return {\n           country,\n           cases\n        }\n      })\n      setDropDownCountries(jsonCountries)\n    }\n    getCountries()\n  },[])\n\n  useEffect(()=>{\n    const showWorldWideWhenFirstLoad= async()=>{\n      let theCountry= await fetch('https://disease.sh/v3/covid-19/all')\n      let theCountryJson=await theCountry.json()\n      setSingleCountry(theCountryJson)\n    }\n    showWorldWideWhenFirstLoad()\n  },[])\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <div className=\"left-part-lay-out\">\n        <div className=\"item\">\n         <div className=\"header\">\n          covid-19-tracker\n          <DropDown\n           dropDownCountries={dropDownCountries}\n           dropDownValue={dropDownValue}\n           setDropDownValue={setDropDownValue}\n           setSingleCountry={setSingleCountry}\n           setCenter={setCenter}\n           setZoom={setZoom}\n           />\n         </div>\n         <div className=\"cards-info\">\n           <Card casesType={casesType} setData={setData} setCasesType={setCasesType} dropDownValue={dropDownValue} total={singleCountry.cases} today={singleCountry.todayCases} title=\"cases\"/>\n           <Card casesType={casesType} setData={setData} setCasesType={setCasesType} dropDownValue={dropDownValue} total={singleCountry.recovered} today={singleCountry.todayRecovered} title=\"recovered\"/>\n           <Card casesType={casesType} setData={setData} setCasesType={setCasesType} dropDownValue={dropDownValue} total={singleCountry.deaths} today={singleCountry.todayDeaths} title=\"deaths\"/>\n         </div>\n         <div className=\"map\">\n           <Mapp\n           casesType={casesType}\n           countriesForCircles={countriesForCircles}\n           center={center}\n           zoom={zoom}\n           />\n         </div>\n        </div>\n      </div>\n      <div className=\"right-part-lay-out\">\n        <div className=\"item\">\n          <h2>Live Cases by Country</h2>\n          <div className=\"countries-cases\">\n            {\n              sortCountries(dropDownCountries).map(ele=>{\n                return <Country country={ele.country} cases={ele.cases} />\n              })\n            }\n          </div>\n          <div className=\"charts\">\n            <Chart\n            casesType={casesType}\n            data={data}\n            setData={setData}\n            />\n          </div>\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3uzEE\",\"cases\":\"Card_cases__1V8fl\",\"recoverd\":\"Card_recoverd__1MNSu\",\"deaths\":\"Card_deaths__3_9gE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapp\":\"Mapp_mapp__1Ooy2\",\"leaflet-container\":\"Mapp_leaflet-container__2S2tf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"country\":\"Country_country__3YzrE\"};"],"sourceRoot":""}